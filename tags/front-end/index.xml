<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>front-end on Alaaddin</title><link>http://alasidig.github.io/swe-363.github.io/tags/front-end/</link><description>Recent content in front-end on Alaaddin</description><generator>Source Themes academia (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright &amp;copy; {year}</copyright><lastBuildDate>Sun, 20 Feb 2022 09:13:09 +0300</lastBuildDate><atom:link href="http://alasidig.github.io/swe-363.github.io/tags/front-end/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML Basics</title><link>http://alasidig.github.io/swe-363.github.io/courses/swe363/html/basics/</link><pubDate>Wed, 12 Jan 2022 09:36:41 +0300</pubDate><guid>http://alasidig.github.io/swe-363.github.io/courses/swe363/html/basics/</guid><description>&lt;h2 id="html-5-semantic-tags">HTML 5 Semantic Tags&lt;/h2>
&lt;h3 id="objective">Objective&lt;/h3>
&lt;p>To learn the page structure element elements in HTML5 and also to learn HTML5 Forms.&lt;/p>
&lt;h3 id="some-html-5-semantic-tags">Some HTML 5 Semantic Tags&lt;/h3>
&lt;p>&lt;img src="https://www.codeproject.com/KB/HTML/semanticHtml5PageLayout/html5pagelayout.png" alt="HTML 5 semantic tags">
These are some semantic structure elements. If you are viewing this page on laptop or any device with a biger screen, you can name these tags.&lt;/p>
&lt;p>The &lt;code>&amp;lt;header&amp;gt;&lt;/code> may be used at the top of the page. Then after that, you may have navigation ( &lt;code>&amp;lt;nav&amp;gt;&lt;/code>)to the right and sometimes also the navigation is moved below the header. And at the bottom, we will have a &lt;code>&amp;lt;footer&amp;gt;&lt;/code>. Which is going to list some links like contacts or useful links or sitemap.&lt;/p>
&lt;p>The &lt;code>&amp;lt;main&amp;gt;&lt;/code> section holds the main content of the page. And it can be divided into &lt;code>&amp;lt;sections&amp;gt;&lt;/code>. Each section will have its &lt;code>&amp;lt;header&amp;gt;&lt;/code>, which contains a title for that section, and may have an &lt;code>&amp;lt;article&amp;gt;&lt;/code> that contains the content of this section, and it also may have a &lt;code>&amp;lt;footer&amp;gt;&lt;/code> to conclude this section. And then after that, you can have another &lt;code>&amp;lt;section&amp;gt;&lt;/code> or so on.&lt;/p>
&lt;p>Before every HTML5, these tags were not there, and people were only using the &lt;code>&amp;lt;div&amp;gt;&lt;/code> tag. then they either give it an &lt;code>id&lt;/code> equal to main or they give it a &lt;code>class&lt;/code> named main or something like that to distinguish from others.&lt;/p>
&lt;p>Alright, so now whenever we design our webpage, would like to have these tags. These tags will help the search engines to index our page well. When it finds something in the main it would say that this is the main topic of the page. And when it finds something in a section it&amp;rsquo;s going to say that this section is about this topic.&lt;/p>
&lt;h3 id="semantic-tags-in-action">Semantic Tags in Action&lt;/h3>
&lt;p>The following video shows the usage of semantic tags in twitter website.
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/KSwtTPAyiu4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/p>
&lt;h2 id="exercises">Exercises&lt;/h2>
&lt;h3 id="debug-html">Debug HTML&lt;/h3>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
&lt;p>This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called &amp;ldquo;debugging&amp;rdquo; your code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;This sentence should be on its own So should this one.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p.&lt;/span> &lt;span style="color:#a6e22e">Whats&lt;/span> &lt;span style="color:#a6e22e">wrong&lt;/span> &lt;span style="color:#a6e22e">with&lt;/span> &lt;span style="color:#a6e22e">this&lt;/span> &lt;span style="color:#a6e22e">sentence&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;h3 id="create-a-webpage">Create a webpage&lt;/h3>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
&lt;p>Given the following text:&lt;/p>
&lt;pre tabindex="0">&lt;code>My Hobbies
Soccer
5 years
Soccer is an awesome sport because you get to play on a team with all your friends. I love the challenge of learning new skills like headers and corner kicks.
Baking
10 years
I love baking because you put together all these things that look simple and boring on their own to make something magical and delicious. I also love how baked things make people happy. Sharing things I bake might be the best part of it!
Drawing
2 years
On the weekend sometimes I go outside and try to draw what I see. My favorite things to draw are buildings.
&lt;/code>&lt;/pre>&lt;p>try to use your HTML skills to create a page that looks like the following
&lt;img src="../html-mini-challenge01.png" alt="html mini challenge">&lt;/p>
&lt;/details>
&lt;h3 id="html-5-webpage">HTML 5 Webpage&lt;/h3>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
&lt;p>Given the text:&lt;/p>
&lt;pre tabindex="0">&lt;code>Easy 5-Minute Banana Smoothie Easy 5-Minute Banana Smoothie
PREP 5mins TOTAL 5mins
Our banana smoothie is extra creamy and fruity. Depending on how ripe or sweet your banana and orange are, you may need to add a little extra honey, so add based on your taste. There are many additions you can make.
For a green smoothie, add 1/2 cup to 1 cup of fresh greens like spinach or kale.
You can also add more fruit. Add 1/2 cup of strawberries, mango, frozen berries, pineapple, or other favorite fruit.
Makes 2 kid-size smoothies or 1 large You Will Need 1 banana 1/2 orange, peeled and quartered 1/3 cup Greek yogurt 1/4 cup water or milk (dairy or non-dairy) 1 to 2 teaspoons honey, optional Directions Roughly chop the banana and orange quarters, and then add to a blender.
Top with yogurt and water (or milk).
Turn blender on and blend until creamy and smooth.
Taste, and then adjust with honey if needed.
Adam and Joanne's Tips How to Freeze or Make Ahead: This recipe makes one smoothie or two kid-size smoothies.
Enjoy now, or save for later. To save the smoothie for later, pour each serving into a food-safe resealable plastic bag or container and freeze. Then, about an hour before needing the smoothie, take it out from the freezer.
Non-Dairy alternatives: If you are looking for a banana smoothie without yogurt, then simply leave the yogurt out of the recipe above and replace it with more banana, a tablespoon or so of nut butter, mango, or a tablespoon of hemp seeds (great protein source). You may need to add additional water or non-dairy milk to thin the smoothie out a little.
Nutrition facts: The nutrition facts provided below are estimates.
We have used the USDA database to calculate approximate values.
If you make this recipe, snap a photo and hashtag it #inspiredtaste â€” We love to see your creations on Instagram and Facebook! Find us: @inspiredtaste
NUTRITION PER SERVING:
Serving Size 1 kid-size smoothie / Calories 122 / Protein 5 g / Carbohydrate 23 g / Dietary Fiber 3 g / Total Sugars 16 g / Total Fat 2 g / Saturated Fat 1 g / Cholesterol 5 mg
AUTHOR: Adam and Joanne Gallagher The full recipe post can be found on Inspired Taste here: https://www.inspiredtaste.net/19907/simple-banana-smoothie-recipe/
&lt;/code>&lt;/pre>&lt;p>and the image at&lt;/p>
&lt;pre tabindex="0">&lt;code>https://www.inspiredtaste.net/wp-content/uploads/2016/06/Banana-Smoothie-Recipe-3-1200.jpg
&lt;/code>&lt;/pre>&lt;p>Use your HTML 5 skills to create a page like the following&lt;/p>
&lt;p>&lt;img src="../recipe-minichallenge.png" alt="recipe minichallenge">&lt;/p>
&lt;/details>
&lt;h2 id="more-resources">More Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure"> Document and website structure&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.to/kenbellows/stop-using-so-many-divs-an-intro-to-semantic-html-3i9i"> Stop using so many divs! An intro to semantic HTML&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>HTML Advanced</title><link>http://alasidig.github.io/swe-363.github.io/courses/swe363/html/advanced/</link><pubDate>Wed, 12 Jan 2022 09:36:41 +0300</pubDate><guid>http://alasidig.github.io/swe-363.github.io/courses/swe363/html/advanced/</guid><description>&lt;h2 id="objectives">Objectives:&lt;/h2>
&lt;p>How we can write an HTML form and what is the rule of HTML forms&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Forms provide the user with a way to interact with a web server. An interactive website allows users to input data using forms. Forms are frontend to backend data transformers.&lt;/p>
&lt;p>For example, if we are going to design a website for fast food. The front end should show some images of the meals. And also the user should be able to click somewhere on the page to add to the shopping cart. And when checking out, he should be able to set his address to deliver the food in a form. So all that should be done on the front end. But we also need to pass data from the front end to the back end so that the admin of this restaurant to be able to serve this customer. The admin will have another view which talks to the database and tell the admin that some person here is ordering a meal and he would like to get it in that address.&lt;/p>
&lt;p>&lt;img src="https://www.javascript-coder.com/html-form/images/server-side-script-part.png" alt="Form sent to the server" title="The frontend enables the user to enter the data and submit it to the backend">
Forms usually include a series of HTML &lt;code>&amp;lt;input&amp;gt;&lt;/code> tags. There are many other tags, but input is the most used. Before HTML 5 there was a limited number of data entry controls that are available. In HTML 5 there are controls for entering text, choosing from a list of buttons and checkboxes, radio buttons ..etc. HTML 5 also added more new controls that we can use to customize options for existing controls.&lt;/p>
&lt;h2 id="worked-example">Worked Example&lt;/h2>
&lt;p>Let&amp;rsquo;s create a simple form that asks the user for a feedback. The required fields includes his name, phone, and a message.
&lt;div class="responsive-wrap">
&lt;iframe src="https://replit.com/@alasidig/forms?lite=true" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>
&lt;/div>&lt;br>
The form starts from line 10 where we added the &lt;code>&amp;lt;form&amp;gt;&lt;/code> tag. Then followed by an &lt;code>&amp;lt;input&amp;gt;&lt;/code> tag for the user name, then another one for the phone, and finally a &lt;code>&amp;lt;textarea&amp;gt;&lt;/code> to hold the message. The &lt;code>&amp;lt;ul&amp;gt;&lt;/code> and &lt;code>&amp;lt;li&amp;gt;&lt;/code> tags are used to format the fields to show in a vertical column because the &lt;code>&amp;lt;input&amp;gt;&lt;/code> and &lt;code>&amp;lt;textarea&amp;gt;&lt;/code> are &lt;code>inline&lt;/code> elements. Click on the green button to see the output.&lt;/p>
&lt;h3 id="the-input-field">The &lt;code>&amp;lt;input&amp;gt;&lt;/code> field&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html"> &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Enter your name&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">required&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>It is a self closing tag&lt;/li>
&lt;li>The &lt;code>type&lt;/code> attribute can have many values like number, email, password, &amp;hellip;etc. It is helpful for simple validation and will render a sutable keyboard on the smartphones.&lt;/li>
&lt;li>The &lt;code>placeholder&lt;/code> attribute is used to display a helping string to the the user what should he input in this field.&lt;/li>
&lt;li>The &lt;code>required&lt;/code> attribute is used to force the user to fill the field before submission.&lt;/li>
&lt;li>The &lt;code>name&lt;/code> attribute is used to communicate the entered values to the server. When submitting this form, a dictionary of keys and values will be created. The keys are what is being assigned to the &lt;code>name&lt;/code> attribute. And the values are the user response for each field. Try to change the &lt;code>name&lt;/code> attribute for the first &lt;code>&amp;lt;input&amp;gt;&lt;/code> to user2 and see the result.&lt;/li>
&lt;li>Setting the &lt;code>type&lt;/code> to submit will create a button to submit the form and enable submitting the form by just pressing the enter key on the keyboard.&lt;/li>
&lt;li>There are many other attributes not added here such as &lt;code>value&lt;/code>, &lt;code>onkeyup&lt;/code>, &amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="the-textarea-field">The &lt;code>&amp;lt;textarea&amp;gt;&lt;/code> field&lt;/h3>
&lt;ul>
&lt;li>It is used to enable the user to enter more than one line of text.&lt;/li>
&lt;li>There are some other attributes not added here such as &lt;code>rows&lt;/code>, &lt;code>cols&lt;/code>,&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="the-form-tag">The &lt;code>&amp;lt;form&amp;gt;&lt;/code> tag&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">form&lt;/span> &lt;span style="color:#a6e22e">action&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;result.html&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>It wraps the input fields.&lt;/li>
&lt;li>The &lt;code>action&lt;/code> attribute tels where to submit the form. It accept the URL of the server that will process the form data. Since we are only discussing the frontend now, the server side script will not be discussed.&lt;/li>
&lt;li>There are many other attributes not added here such as &lt;code>onsubmit&lt;/code>, &lt;code>enctype&lt;/code>, &amp;hellip;&lt;/li>
&lt;li>The &lt;code>method&lt;/code> attribute determines how to submit the form. It can be set to &lt;code>get&lt;/code> or &lt;code>post&lt;/code>. There are some differences between the two methods as shown in the following video
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/Vk2Rm6tthz8" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h2 id="exercises">Exercises&lt;/h2>
&lt;h3 id="company-hiring-form">Company hiring form&lt;/h3>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
Create a web page for a company of your choice it should contain some description, products, images, and a large title: &lt;strong>We are hiring join us by filling this application.&lt;/strong> the title should link to a page that contains the following form:
&lt;img src="../jop_form.png" alt="job_form.png">
&lt;/details>
&lt;h3 id="restaurant-table-reservation">Restaurant Table Reservation&lt;/h3>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
&lt;p>create a web page for a restaurant. it should contain an image and a list of meals with some description. it should contain a link to another page that contains a form to reserve a table like the following.&lt;/p>
&lt;p>&lt;img src="../table_form.gif" alt="table_form.gif">&lt;/p>
&lt;/details>
&lt;h2 id="more-resources">More Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form" target="_blank">
Your first form
&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Basic_native_form_controls" target="_blank">
Basic native form controls
&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_input_types" target="_blank">
The HTML5 input types
&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://webaim.org/techniques/forms/controls" target="_blank">
Creating Accessible Forms
&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CSS Basics</title><link>http://alasidig.github.io/swe-363.github.io/courses/swe363/css/css_basics/</link><pubDate>Thu, 10 Feb 2022 09:36:41 +0300</pubDate><guid>http://alasidig.github.io/swe-363.github.io/courses/swe363/css/css_basics/</guid><description>&lt;h2 id="objectives">Objectives&lt;/h2>
&lt;p>Learn the basics of using CSS for styling websites.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In web development the rule of Cascade Style Sheets is to control how the contents are presented to the user. It is used to decide on the site layout, colors, fonts, animations, &amp;hellip; etc.&lt;/p>
&lt;h2 id="worked-example">Worked Example:&lt;/h2>
&lt;p>In this handout, we will create an interactive smiley face. The final output looks as follows.
&lt;img src="../smileCrop.gif" alt="The smiley face">
It is recommended that you write the code your self before expanding the given solution. Try to avoid coping and pasting.&lt;/p>
&lt;h3 id="html-code">HTML code&lt;/h3>
&lt;p>In the HTML body, we would like to start drawing this ðŸ˜€. We can have a &lt;code>&amp;lt;div&amp;gt;&lt;/code> with the &lt;code>class&lt;/code> &lt;code>smiley&lt;/code>.
And inside this div, we would like to have two other divs, one for each eye, and one for the mouth.
Still, we can&amp;rsquo;t see anything on the browser because these divs by default don&amp;rsquo;t have any size unless you give them some content inside.&lt;/p>
&lt;details>
&lt;summary>
Index.html
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;style2.css&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Smile Please&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Hover Over Me to Smile!!&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;smiley&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;eyes&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;leftEye&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;eyes&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rightEye&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- for entertainment add cheeks --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cheeks&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cheeks&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mouth&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;h3 id="css-styling">CSS Styling&lt;/h3>
&lt;p>Now let&amp;rsquo;s start the styling. We would like firstly to style the smiley class. Firstly, to show it on the screen, we need to give it &lt;code>height&lt;/code> and &lt;code>width&lt;/code> since we don&amp;rsquo;t have any content in this div. By default, it&amp;rsquo;s going to take the full widht of the screen because it is a block element. Then, change the &lt;code>background-color&lt;/code> to gold.&lt;/p>
&lt;h4 id="styling-the-face">Styling the face&lt;/h4>
&lt;p>&lt;details>
&lt;summary>
smiley class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span>{
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#75715e">/* let us give it some background-color: ; */&lt;/span>
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">gold&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
We would like to give it some space around it and move it away from the edge.
To do that, we can use the &lt;code>margin&lt;/code> property.
The &lt;code>margin&lt;/code> is the space around the element outside the &lt;code>border&lt;/code> while the &lt;code>padding&lt;/code> is space around the content.&lt;/p>
&lt;p>&lt;details>
&lt;summary>
smiley class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span>{
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#75715e">/* let us give it some background-color: ; */&lt;/span>
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">gold&lt;/span>;
&lt;span style="color:#75715e">/* let us move it away from the edges */&lt;/span>
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
We can also, add a &lt;code>border&lt;/code> around the face. For the &lt;code>border&lt;/code> property, you choose the color, style, and thickness. So let&amp;rsquo;s add a &lt;code>black&lt;/code> &lt;code>solid&lt;/code> &lt;code>2px&lt;/code> thick border. but we are not limited to these named colors. Hovering over the word &lt;code>â€˜blackâ€™&lt;/code> in VSCode will popup the color chooser utility to select any color. The color can be represented as a blend of red, green, and blue with different ratios.
&lt;details>
&lt;summary>
smiley class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span>{
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#75715e">/* let us give it some background-color: ; */&lt;/span>
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">gold&lt;/span>;
&lt;span style="color:#75715e">/* let us move it away from the edges */&lt;/span>
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#75715e">/* let us add border to the face. now let us use a different way to add colors border*/&lt;/span>
&lt;span style="color:#66d9ef">border&lt;/span>: &lt;span style="color:#66d9ef">black&lt;/span> &lt;span style="color:#66d9ef">solid&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;img src="../color_chooser.jpg" alt="vscode color chooser">
So we gave it now a border, but the face doesn&amp;rsquo;t look square right? So to change that we can use the &lt;code>border-radius&lt;/code>. The &lt;code>border-radius&lt;/code> specifies how rounded the corner should be. we would like the face to be completely round. This means the border-radius should be at least half of the width &lt;code>100px&lt;/code>. we can use relative units (&lt;code>50%&lt;/code>) and let CSS handle the calculation&lt;/p>
&lt;details>
&lt;summary>
smiley class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span>{
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#75715e">/* let us give it some background-color: ; */&lt;/span>
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">gold&lt;/span>;
&lt;span style="color:#75715e">/* let us move it away from the edges */&lt;/span>
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#75715e">/* let us add border to the face. now let us use a different way to add colors border*/&lt;/span>
&lt;span style="color:#66d9ef">border&lt;/span>: rgb(&lt;span style="color:#ae81ff">45&lt;/span>, &lt;span style="color:#ae81ff">45&lt;/span>, &lt;span style="color:#ae81ff">45&lt;/span>) &lt;span style="color:#66d9ef">solid&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#75715e">/* but the face shouldn&amp;#39;t be a square */&lt;/span>
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;h4 id="styling-the-mouth">Styling the mouth&lt;/h4>
&lt;p>So inside the ðŸ˜€ we are having eyes and a mouth. The mouth needs size and background color to show up. Let us add &lt;code>height&lt;/code> and &lt;code>width&lt;/code> and a black 10px thick &lt;code>border&lt;/code>.
&lt;details>
&lt;summary>
mouth class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">mouth&lt;/span>{
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">75&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">border-bottom&lt;/span>: &lt;span style="color:#ae81ff">#2d2d2d&lt;/span> &lt;span style="color:#66d9ef">solid&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>&lt;/p>
&lt;h3 id="face-layout">Face Layout&lt;/h3>
&lt;p>OK, but this is not where the mouth should be. To move it to the right location, we can think of the face as a 5x5 &lt;code>grid&lt;/code>. The mouth should be in the forth row and spanning three columns as in this figure:
&lt;img src="../face_grid.jpg" alt="face grid">
The line marks the starting of the column or a row. to do that we can change the &lt;code>display&lt;/code> property of the &lt;code>.smiley&lt;/code> to &lt;code>grid&lt;/code> and set the templates for rows and columns.
&lt;details>
&lt;summary>
smiley class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span>{
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#75715e">/* let us give it some background-color: ; */&lt;/span>
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">gold&lt;/span>;
&lt;span style="color:#75715e">/* let us move it away from the edges */&lt;/span>
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#75715e">/* let us add border to the face. now let us use a different way to add colors border*/&lt;/span>
&lt;span style="color:#66d9ef">border&lt;/span>: &lt;span style="color:#66d9ef">black&lt;/span> &lt;span style="color:#66d9ef">solid&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">grid&lt;/span>;
&lt;span style="color:#66d9ef">grid-template-columns&lt;/span>: &lt;span style="color:#a6e22e">repeat&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>fr);
&lt;span style="color:#66d9ef">grid-template-rows&lt;/span>: &lt;span style="color:#a6e22e">repeat&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">40&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>);
place-items: &lt;span style="color:#66d9ef">center&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>&lt;/p>
&lt;p>Whit that done, now we can style the mouth and move it to the correct place.
&lt;details>
&lt;summary>
mouth class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">mouth&lt;/span>{
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">75&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">border-bottom&lt;/span>: &lt;span style="color:#ae81ff">#2d2d2d&lt;/span> &lt;span style="color:#66d9ef">solid&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">grid-row&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;span style="color:#66d9ef">grid-column&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>&lt;/p>
&lt;h4 id="styling-the-eyes">Styling the eyes&lt;/h4>
&lt;p>Similarly, we can style the eyes. Since the two eyes share common style, we can add the common CSS properties to the &lt;code>eyes&lt;/code> class and use the ids for the distinct styles
&lt;details>
&lt;summary>
eyes class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">eyes&lt;/span>{
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">45&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#2d2d2d&lt;/span>;
&lt;span style="color:#75715e">/* make them oval */&lt;/span>
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>&lt;/p>
&lt;details>
&lt;summary>
Right and left eye CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">#leftEye{
&lt;span style="color:#66d9ef">grid-column&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;span style="color:#66d9ef">grid-row&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>;
}
#rightEye{
&lt;span style="color:#66d9ef">grid-column&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;span style="color:#66d9ef">grid-row&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;h4 id="adding-the-cheeks">Adding the cheeks&lt;/h4>
&lt;p>The cheeks style is similar ot the eyes. The differences are the color and the position. For the color, instead of a single solid color, a fancy gradient color is used.
&lt;details>
&lt;summary>
cheeks class CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">cheeks&lt;/span>{
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">35&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">45&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">background&lt;/span>:radial-gradient(&lt;span style="color:#66d9ef">circle&lt;/span>,&lt;span style="color:#66d9ef">red&lt;/span>,&lt;span style="color:#66d9ef">pink&lt;/span>);
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#66d9ef">opacity&lt;/span>: &lt;span style="color:#ae81ff">35&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#66d9ef">grid-row&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
To move the right cheek to the right, we can select it using the pseudo class &lt;code>nth-of-type&lt;/code>
&lt;details>
&lt;summary>
Right cheek CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">div&lt;/span>.&lt;span style="color:#a6e22e">cheeks&lt;/span>:&lt;span style="color:#a6e22e">nth-of-type&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">2n&lt;/span>&lt;span style="color:#f92672">)&lt;/span>{
&lt;span style="color:#66d9ef">grid-column&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>&lt;/p>
&lt;h3 id="animation">Animation&lt;/h3>
&lt;p>Let us now finally smile ðŸ˜Š. For this we use &lt;code>hover&lt;/code> pseudo class. For the eyes, we would like to change their &lt;code>width&lt;/code> and &lt;code>height&lt;/code>.&lt;/p>
&lt;p>&lt;details>
&lt;summary>
Smiling eyes CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> .&lt;span style="color:#a6e22e">eyes&lt;/span>{
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">45&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
For the mouth, we would like to change the &lt;code>width&lt;/code>, &lt;code>height&lt;/code>, and &lt;code>border-radius&lt;/code>.&lt;/p>
&lt;details>
&lt;summary>
Smiling mouth CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* the mouth should expand and become rounded*/&lt;/span>
.&lt;span style="color:#a6e22e">smiley&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> .&lt;span style="color:#a6e22e">mouth&lt;/span>{
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;p>The cheeks should be hidden and only be shown on hover. This can be done using the &lt;code>opacity&lt;/code>. In the &lt;code>.cheeks&lt;/code> class change the &lt;code>css opacity: 35%; &lt;/code> to &lt;code>css opacity: 0; &lt;/code> to hide the cheeks.&lt;/p>
&lt;details>
&lt;summary>
Smiling cheeks CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> .&lt;span style="color:#a6e22e">cheeks&lt;/span>{
&lt;span style="color:#66d9ef">opacity&lt;/span>: &lt;span style="color:#ae81ff">35&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;p>Finally to have a smooth transition we can set the duration of state-change to 1 second. To do that, use the &lt;code>transition&lt;/code> property. This should be added to eyes, cheeks, and mouth. Instead of repeating the same rule in different places, we can use the &lt;code>*&lt;/code> selector to select all the children of &lt;code>.smiley&lt;/code> div.&lt;br>
&lt;details>
&lt;summary>
Smooth animation
&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">smiley&lt;/span> &lt;span style="color:#f92672">&amp;gt;*&lt;/span>{
&lt;span style="color:#66d9ef">transition&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">s&lt;/span> ;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>&lt;/p>
&lt;h2 id="exercises">Exercises&lt;/h2>
&lt;h3 id="suggested-changes-on-the-example">Suggested changes on the example&lt;/h3>
&lt;ul>
&lt;li>Add different animations like ðŸ˜‚ or ðŸ¤£ ro ðŸ¤©&lt;/li>
&lt;li>Replace the &lt;code>grid-template-columns&lt;/code> by &lt;code>grid-template-areas&lt;/code>&lt;/li>
&lt;li>Replace the &lt;code>grid&lt;/code> by &lt;code>flex&lt;/code>&lt;/li>
&lt;li>Re-implement using &lt;code>position&lt;/code> instead of &lt;code>grid&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="webpages-styling">Webpages styling&lt;/h3>
&lt;h4 id="deserts-of-the-world">Deserts of the world&lt;/h4>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
&lt;p>Fork the repl on the following link &lt;a href="https://replit.com/@alasidig/cssimages#index.html">https://replit.com/@alasidig/cssimages#index.html&lt;/a> then follow the comments on the style.css to make the page looks like the following image&lt;/p>
&lt;p>&lt;img src="../output.png" alt="table_form.gif">&lt;/p>
&lt;/details>
&lt;h4 id="url-shortener">URL Shortener&lt;/h4>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
Fork the following repository &lt;a href="https://github.com/alasidig/url-shortener">https://github.com/alasidig/url-shortener&lt;/a> then following the style guide in style-guide.md, start styling the page until it looks like the image in the design/desktop-active-states.jpg.
&lt;/details></description></item><item><title>JS Events</title><link>http://alasidig.github.io/swe-363.github.io/courses/swe363/js/events/</link><pubDate>Sun, 20 Feb 2022 09:13:09 +0300</pubDate><guid>http://alasidig.github.io/swe-363.github.io/courses/swe363/js/events/</guid><description>&lt;h2 id="objectives">Objectives&lt;/h2>
&lt;p>Learn the basics of using JavaScript for listening and responding to different events that may happen in a web page.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In a web page, many events can occur. When the page loads, when clicking on a button, when changing a selection of choices, when pressing a key on the keyboard editing some input, and many others. JavaScript can listen for these events and execute some code to customize the behaviour in response the their occurrence.&lt;/p>
&lt;h2 id="worked-example">Worked Example&lt;/h2>
&lt;p>In this handout, we will use JavaScript to listen and handle different events. The final behaviour looks as follows.
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/AYqYlJEppq4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/p>
&lt;ol>
&lt;li>After two seconds from loading the page, the form disappears.&lt;/li>
&lt;li>Clicking on the button reveals the form and disappears.&lt;/li>
&lt;li>Capitalize the first name as the user types&lt;/li>
&lt;li>Validate that the email is filled before submitting the form&lt;/li>
&lt;li>Validate that the username only contains alphanumeric characters and underscores&lt;/li>
&lt;li>Remind the user to receive our promotion and respect his decision&lt;/li>
&lt;/ol>
&lt;p>It is recommended that you write the code your self before expanding the given solution. Try to avoid coping and pasting.&lt;/p>
&lt;h3 id="html-code">HTML code&lt;/h3>
&lt;p>In the HTML body, we would like to have a form to demonstrate different events and how to handle them.
&lt;details>
&lt;summary>
Index.html
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">http-equiv&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IE=edge&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;JS Demo&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;style.css&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;span style="display:block;width:100%;background-color:#3c3d38"> &amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;showForm(this)&amp;#34;&lt;/span>&amp;gt;click to register&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38"> &amp;lt;&lt;span style="color:#f92672">form&lt;/span> &lt;span style="color:#a6e22e">onsubmit&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;return validate()&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">action&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;register&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;form&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">autocomplete&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;off&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38"> &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">onkeyup&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;capitalize(this)&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;firstname&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;first name&amp;#34;&lt;/span>&amp;gt;
&lt;/span> &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;promo&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;promo&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;promo&amp;#34;&lt;/span>&amp;gt;Send me Promotions&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;submit&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Submit&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">form&lt;/span>&amp;gt;
&lt;span style="display:block;width:100%;background-color:#3c3d38"> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;index.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
As shown in line 8 and 21 we are linking external CSS and JS files.&lt;/p>
&lt;h3 id="simple-style">Simple Style&lt;/h3>
&lt;details>
&lt;summary>
Simple CSS rules
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">body&lt;/span>{
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">antiquewhite&lt;/span>;
}
.&lt;span style="color:#a6e22e">form&lt;/span> &lt;span style="color:#f92672">input&lt;/span>{
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">block&lt;/span>;
&lt;span style="color:#66d9ef">margin-top&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">.75&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
}
&lt;span style="color:#f92672">button&lt;/span>{
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1.2&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;h3 id="1-js-listening-and-responding-to-page-load">1. JS Listening and responding to page &lt;code>load&lt;/code>&lt;/h3>
&lt;p>Page loading is one of the &lt;code>window&lt;/code> related events.
It is fired when the browser completes loading the page components (HTML,CSS,JS).&lt;br>
To target this event, we provide a handler to be called when the event fires. In this example, we would like to wait for 2 seconds then hide the form. This can be done using &lt;code>setTimeout&lt;/code>.&lt;/p>
&lt;p>As shown in the video, the form slides out of the screen. This can be done by changing its CSS &lt;code>margin-left&lt;/code> to a negative value.
To get a reference to the form we can use the &lt;code>DOM&lt;/code> to find an HTML element named &lt;code>register&lt;/code>.
To change the CSS style of an element we can set the desired property on &lt;code>element.style&lt;/code>. The name of the property (&lt;code>margin-left&lt;/code> in our case) will be the same except it is camelCased (ie &lt;code>marginLeft&lt;/code>).
&lt;details>
&lt;summary>
Hide the form
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="display:block;width:100%;background-color:#3c3d38">&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="display:block;width:100%;background-color:#3c3d38">document.&lt;span style="color:#a6e22e">onload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">setTimeout&lt;/span>(&lt;span style="color:#a6e22e">hideForm&lt;/span>, &lt;span style="color:#ae81ff">2000&lt;/span>);
&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">form&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">register&lt;/span>;
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">hideForm&lt;/span>() {
&lt;span style="display:block;width:100%;background-color:#3c3d38"> &lt;span style="color:#a6e22e">form&lt;/span>.&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">marginLeft&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-300px&amp;#34;&lt;/span>;
&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>&lt;/p>
&lt;h3 id="2-reshowing-the-form-onclick">2. Reshowing the form &lt;code>onclick&lt;/code>&lt;/h3>
&lt;p>The first element in the HTML body is a button. As on line 12, we added &lt;code>onclick&lt;/code> attribute to the button. This is the second way to listen and respond to events.
When the user clicks on this button the function named &lt;code>showForm&lt;/code> will be called.
To show the form we can reverse the way it was hidden by resetting the &lt;code>left-margin&lt;/code> to 0.
The parameter &lt;code>this&lt;/code> is a reference to the clicked button. We can use this reference to hide the button. It will be assigned to the &lt;code>eventSource&lt;/code> parameter.
&lt;details>
&lt;summary>
Reshow the form
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">showForm&lt;/span>(&lt;span style="color:#a6e22e">eventSource&lt;/span>) {
&lt;span style="color:#a6e22e">form&lt;/span>.&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">marginLeft&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;0px&amp;#34;&lt;/span>;
&lt;span style="color:#a6e22e">eventSource&lt;/span>.&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">display&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;none&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>&lt;/p>
&lt;h3 id="3-capitalize-the-first-name-as-the-user-types">3. Capitalize the first name as the user types&lt;/h3>
&lt;p>To change the case as the user types, we target the &lt;code>onkeyup&lt;/code> keyboard event on the first-name field as in line 14.
This event will be fired after each keyboard keypress. When it occurs, the &lt;code>value&lt;/code> attribute holds the current entered text. We replace it with the capital version using the &lt;code>toUpperCase&lt;/code> string function.
&lt;details>
&lt;summary>
Capitalize text
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">capitalize&lt;/span>(&lt;span style="color:#a6e22e">inputField&lt;/span>) {
&lt;span style="color:#a6e22e">inputField&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">inputField&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>.&lt;span style="color:#a6e22e">toUpperCase&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>&lt;/p>
&lt;h3 id="4-validate-that-the-email-is-filled-before-submitting-the-form">4. Validate that the email is filled before submitting the form&lt;/h3>
&lt;p>So far we targeted individual inputs and handled events on them. But now we are interested in validating the form before we send it to the server.
There are different levels of validating the form. The first, using HTML 5 tags: by setting the type to &lt;code>email&lt;/code>, the browsers will validate that it at least contains &lt;code>@&lt;/code> symbol.
The second level, using client-side javascript: by handling the &lt;code>onsubmit&lt;/code> form event and check the inputs before submitting.
The third level using server-side scripting when receiving the form data.&lt;/p>
&lt;p>In this step, we do the second level of validation. As shown in line 13 of the HTML, the &lt;code>&amp;lt;form&amp;gt;&lt;/code> tag sets the &lt;code>onsubmit&lt;/code> handler to the return of &lt;code>validate()&lt;/code>.
This means if this function returns &lt;code>true&lt;/code>, the form is valid and can be sent to the server. Otherwise, it is not valid and we should not send it. For the email field w&amp;rsquo;d like to make sure it is filled before submitting the form.
We need a reference to the email field to check the length of its &lt;code>value&lt;/code>. If it is zero, this means the user didn&amp;rsquo;t provide the email and shouldn&amp;rsquo;t submit this form. &lt;br>
&lt;details>
&lt;summary>
Form Validation: Required Email
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">validate&lt;/span>() {
&lt;span style="color:#75715e">// validate the email
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">email&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">register&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>; &lt;span style="color:#75715e">// find the value of the email
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">email&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;invalid email&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
}
&lt;span style="color:#75715e">// validate the user name
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// validate the promotion
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>; &lt;span style="color:#75715e">// all validations passed successfully
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>&lt;/p>
&lt;h3 id="5-validate-that-the-username-only-contains-alphanumeric-characters-and-underscores">5. Validate that the username only contains alphanumeric characters and underscores&lt;/h3>
&lt;p>Following the same steps of validating the email, we can check the validity of the username. The problem here is to make sure
that only alphanumeric and underscores are used. Since the username can be in any form of combination of these characters,
this means using &lt;code>regural expression&lt;/code> is one of the best ways to validate it. The following regular expression can be used to check for that &lt;code>^[a-zA-Z0-9_]+$&lt;/code>.
Following is the explanation of this regex:&lt;/p>
&lt;ul>
&lt;li>&lt;code>^&lt;/code> asserts position at start of a line&lt;/li>
&lt;li>Match a single character present in the list below [a-zA-Z0-9_]&lt;/li>
&lt;li>&lt;code>+&lt;/code> matches the previous token between &lt;strong>one&lt;/strong> and &lt;strong>unlimited&lt;/strong> times, as many times as possible,&lt;/li>
&lt;li>&lt;code>a-z&lt;/code> matches a single character in the range between a (index 97) and z (index 122) (case sensitive)&lt;/li>
&lt;li>&lt;code>A-Z&lt;/code> matches a single character in the range between A (index 65) and Z (index 90) (case sensitive)&lt;/li>
&lt;li>&lt;code>0-9&lt;/code> matches a single character in the range between 0 (index 48) and 9 (index 57) (case sensitive)&lt;/li>
&lt;li>&lt;code>_&lt;/code> matches the character _ with index 95 literally (case sensitive)&lt;/li>
&lt;li>&lt;code>$&lt;/code> asserts position at the end of a line.&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>test&lt;/code> function checks if the string (&lt;code>username.value&lt;/code> ) satisfies all of above conditions
&lt;details>
&lt;summary>
function validate() continuation: username
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#75715e">//validate the user name
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">register&lt;/span>.&lt;span style="color:#a6e22e">username&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">regex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">/^[a-zA-Z0-9_]+$/&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">regex&lt;/span>.&lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#a6e22e">username&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>)) {
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;invalid username&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">username&lt;/span>.&lt;span style="color:#a6e22e">focus&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>&lt;/p>
&lt;h3 id="6-remind-the-user-to-receive-our-promotion-and-respect-his-decision">6. Remind the user to receive our promotion and respect his decision&lt;/h3>
&lt;p>This is a soft validation, if the user choose not receive promotions, we remind him before submitting. If he accepts after the reminder we submit the form showing that he accepted.
And if he declines after the reminder we submit the form respecting his choice.
The &lt;code>confirm&lt;/code> function presents the user the prompt. It returns &lt;code>true&lt;/code> if the user clicks on &lt;code>Ok&lt;/code> and &lt;code>false&lt;/code> when he clicks on &lt;code>Cancel&lt;/code>&lt;/p>
&lt;details>
&lt;summary>
function validate() continuation: promotion
&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#75715e">// validate the promotion
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">promoCheck&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#promo&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">promoCheck&lt;/span>.&lt;span style="color:#a6e22e">checked&lt;/span>) {
&lt;span style="color:#a6e22e">promoCheck&lt;/span>.&lt;span style="color:#a6e22e">checked&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">confirm&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;If you don&amp;#39;t want miss our promotion click ok&amp;#34;&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;h2 id="exercises">Exercises&lt;/h2>
&lt;h3 id="suggested-changes-on-the-example">Suggested changes on the example&lt;/h3>
&lt;ul>
&lt;li>Add regex validation for the email.&lt;/li>
&lt;li>Replace the &lt;code>alert&lt;/code> calls by placing the error message beside the input field.&lt;/li>
&lt;li>Add a reset button and clear all the input fields when clicked.&lt;/li>
&lt;/ul>
&lt;h3 id="validate-the-company-hiring-form">Validate the company hiring form&lt;/h3>
&lt;details>
&lt;summary>
Expand
&lt;/summary>
&lt;p>Validate the form give in &lt;a href="http://localhost:1313/swe-363.github.io/courses/swe363/html/advanced/#company-hiring-form">This Exercise&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>All fields labeled with red star are required.&lt;/li>
&lt;li>The date for &lt;strong>When can you start?&lt;/strong> must be after the date of filling the form.&lt;/li>
&lt;li>A maximum 200 characters comment.&lt;/li>
&lt;/ul>
&lt;/details></description></item></channel></rss>