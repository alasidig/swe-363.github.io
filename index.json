[{"authors":["admin"],"categories":null,"content":"Alaaddin Sabr is a professor of Computer Science at the KFUPM ICTC. His research interests include Computer vision, and Machine learning. He is interested in web development and mobile app development.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"http://alasidig.github.io/swe-363.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/swe-363.github.io/authors/admin/","section":"authors","summary":"Alaaddin Sabr is a professor of Computer Science at the KFUPM ICTC. His research interests include Computer vision, and Machine learning. He is interested in web development and mobile app development.","tags":null,"title":"Alaaddin Sabr","type":"authors"},{"authors":null,"categories":null,"content":"Course Description Fundamentals of web and mobile applications and how they impact people’s lives; Building responsive front-end web and mobile apps; Back-end programming of dynamic and data-driven websites; Development frameworks for web and mobile apps; Security issues of web applications; Practical applications to real-world problems.\nPrerequisites: Junior Standing\nIn This Website: You will find the handouts for the different topics discussed in the course.\n","date":1641968403,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1641968403,"objectID":"1eba9cb6528b8e3654eb6b17751acbc7","permalink":"http://alasidig.github.io/swe-363.github.io/courses/swe363/","publishdate":"2022-01-12T09:20:03+03:00","relpermalink":"/swe-363.github.io/courses/swe363/","section":"courses","summary":"Fundamentals of web and mobile applications and how they impact people’s lives; Building responsive front-end web and mobile apps; Back-end programming of dynamic and data-driven websites; Development frameworks for web and mobile apps; Security issues of web applications; Practical applications to real-world problems.","tags":null,"title":"SWE 363 Web Engineering and Development","type":"docs"},{"authors":null,"categories":null,"content":"Demystifying the Web: Your Journey into Web Development and Engineering Welcome aboard, future web architects! This module lays the foundation for your exciting journey into the world of web development and engineering. Buckle up as we explore the intricate tapestry of the web, unraveling its purpose, technology, and underlying principles.\nThe Web: An Ocean of Information Before we dive deep, let\u0026rsquo;s define our playground. The web isn\u0026rsquo;t just a collection of websites; it\u0026rsquo;s a vast, interconnected network of documents and resources, accessible through hyperlinks and accessed using web browsers. It\u0026rsquo;s a living breathing entity, constantly evolving, and serving its primary purpose: connecting people and information.\nImagine an endless library with shelves upon shelves of information, connected by magical threads you can click to explore further - that\u0026rsquo;s the web!\nWeb vs. Internet: Not Identical Twins Don\u0026rsquo;t confuse the web with its underlying infrastructure, the internet. The internet is the network of networks, the cables and protocols that allow communication between computers worldwide. Think of it as the highways and traffic lights, while the web is the vibrant city built upon them.\nWeb Servers, Browsers, and Hyperlinks: The Web\u0026rsquo;s Symphony Now, meet the key players behind the scenes:\nWeb servers: These tireless workhorses store and deliver website content upon request. Imagine them as libraries housing millions of books, ready to be dispatched to eager readers. Web browsers: These are your windows to the web, interpreting and displaying the information delivered by web servers. It\u0026rsquo;s like your personal reading device, transforming bytes into beautiful, interactive experiences. Hyperlinks: These are the web\u0026rsquo;s magic connectors, weaving pages together. They\u0026rsquo;re the clickable pathways that let you navigate from one corner of the web to another, seamlessly and with a single click. Browser Server The browser translate the code of a webpage The server store/run the code How the Internet Makes the Web Dance Let\u0026rsquo;s peek under the hood and witness the internet\u0026rsquo;s magic trick: data transmission. It all starts with your request, which travels through the internet as tiny packets, carrying unique identifiers like IP Address and sequence numbers. Think of them as numbered mail packages finding their way through complex sorting centers, guided by DNS (the internet\u0026rsquo;s phonebook) and clever algorithms choosing the best route. Every packet\u0026rsquo;s safe arrival is confirmed with an acknowledgement, ensuring smooth delivery of information. 1. Packets: In data networking, a packet is a small segment of a larger message. Data sent over computer networks, such as the Internet, is divided into packets. These packets are then recombined by the computer or device that receives them. Each packet contains both the data being transmitted and information about the data, such as the source and destination addresses, the sequence number, and the size of the packet. 2. IP Addresses: An Internet Protocol address (IP address) is a numerical label such as 192.0.2.1 that is assigned to a device connected to a computer network that uses the Internet Protocol for communication. IP addresses serve two main functions: network interface identification, and location addressing. 3. Sequence Numbers: TCP (Transmission Control Protocol) uses a sequence number to identify each byte of data. The sequence number identifies the order of the bytes sent from each computer so that the data can be reconstructed in order, regardless of any out-of-order delivery that may occur. 4. DNS (Domain Name System): The Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. 5. Best Route: The best path is selected by a routing protocol based on the value or metric it uses to determine the distance to reach a network. A metric is the quantitative value used to measure the distance to a given network. The best path to a network is the path with the lowest metric. 6. Acknowledgement: In data networking, telecommunications, and computer buses, an acknowledgment (ACK) is a signal that is passed between communicating processes, computers, or devices to signify acknowledgment, or receipt of message, as part of a communications protocol. Web Browsers: Compatibility Chameleons Remember, not all browsers are created equal. Different versions and capabilities can lead to inconsistencies in how websites appear and function. This is the challenge of web browser compatibility. As developers, we must strive to make our creations adaptable, chameleon-like, adjusting to the diverse landscape of browsers our users inhabit.\nStatic vs. Dynamic Websites: Two Flavors of the Web Cake Imagine a website as a bakery. Static websites are like pre-baked cookies, delicious and fixed in form. They offer stability and simplicity, perfect for informational portals or personal portfolios. On the other hand, dynamic websites are like freshly baked cakes, responsive and ever-changing. They use scripting languages and databases to personalize experiences and interact with users, making them ideal for e-commerce platforms or social media. Web 2.0 and Web 3.0: Evolution of the Web\u0026rsquo;s DNA The web is constantly evolving, and we\u0026rsquo;ve witnessed two major leaps:\nWeb 2.0: Remember MySpace and Facebook? They ushered in an era of user-generated content and social interaction, turning the web from a one-way street to a bustling marketplace of ideas. Web 3.0: Prepare for the \u0026ldquo;semantic web,\u0026rdquo; where AI and machine learning personalize your experience even further. Imagine websites that understand your context and preferences, anticipating your needs before you even express them. Frontend and Backend: Teamwork Makes the Dream Work Developing a website is like building a house. The frontend is the beautiful facade, the part users see and interact with. It\u0026rsquo;s made of HTML, CSS, and JavaScript, the bricks and mortar of visual design and interactivity. Think of it as the paint, windows, and doors that make the house inviting and functional.\nOn the other hand, the backend is the powerhouse engine and data storage, hidden behind the scenes but crucial for the house to function. Languages like Python and Java come into play here, ensuring smooth data processing, secure information handling, and efficient database management. It\u0026rsquo;s like the foundation, plumbing, and electrical wiring that keep the house standing and everything running smoothly.\nThink of it this way: When you enter a website, you see the buttons, pictures, and text – that\u0026rsquo;s the frontend. But when you click a button, log in, or make a purchase, the backend machinery kicks in, processing your request, retrieving data from the database, and sending it back to the frontend to update what you see on your screen.\nThe two sides work together seamlessly: Frontend developers are the architects and interior designers, building the visible structure and user experience. Backend developers are the engineers and plumbers, ensuring the underlying systems are secure, efficient, and performant. Both are essential for a successful website, just like both the facade and the foundation are crucial for a strong house. Web Project Lifecycle: From Dream to Reality Every amazing website starts as a seed of an idea. The web project lifecycle takes that seed and nurtures it into a flourishing digital garden. It involves meticulous requirements gathering, creating blueprints like wireframes, and then employing development methodologies like the agile process to break down tasks into manageable sprints. Finally, we employ the multi-tier architecture, the three-layered cake of browser, web server, and database, to bring the website to life in a secure and efficient manner.\nHere\u0026rsquo;s a closer look at the phases: Requirements Gathering: This is where we understand the client\u0026rsquo;s vision, target audience, and website goals. It\u0026rsquo;s like talking to the homeowner to understand their needs and desired outcome for the house. Wireframing: This is creating a rough sketch of the website\u0026rsquo;s layout and functionality. It\u0026rsquo;s like drawing the floor plan of the house before construction begins. Agile Development: This is a flexible approach where we break down the project into small, iterative tasks and work in short sprints. It\u0026rsquo;s like building the house room by room, constantly testing and refining as we go. Multi-Tier Architecture: This is the layered structure of the website, with the browser at the top interacting with the web server, which in turn communicates with the database. It\u0026rsquo;s like the different floors of the house, each with its own purpose and connected through stairs and hallways. By following this lifecycle, we ensure that websites are built efficiently, meet user needs, and are adaptable to future changes.\nThis is just a glimpse into the exciting world of web development and engineering. Get ready to delve deeper, explore new technologies, and unleash your creativity to build beautiful, functional, and impactful websites!\n","date":1704875179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704875179,"objectID":"5d78a68a3e5f5d9e42c5c255b5fc2377","permalink":"http://alasidig.github.io/swe-363.github.io/courses/swe363/intro/intro/","publishdate":"2024-01-10T11:26:19+03:00","relpermalink":"/swe-363.github.io/courses/swe363/intro/intro/","section":"courses","summary":"Introduction to Web engineering and Development.","tags":["Networking","IP","DNS"],"title":"Introduction","type":"docs"},{"authors":null,"categories":null,"content":"HTML 5 Semantic Tags Objective To learn the page structure element elements in HTML5 and also to learn HTML5 Forms.\nSome HTML 5 Semantic Tags These are some semantic structure elements. If you are viewing this page on laptop or any device with a biger screen, you can name these tags.\nThe \u0026lt;header\u0026gt; may be used at the top of the page. Then after that, you may have navigation ( \u0026lt;nav\u0026gt;)to the right and sometimes also the navigation is moved below the header. And at the bottom, we will have a \u0026lt;footer\u0026gt;. Which is going to list some links like contacts or useful links or sitemap.\nThe \u0026lt;main\u0026gt; section holds the main content of the page. And it can be divided into \u0026lt;sections\u0026gt;. Each section will have its \u0026lt;header\u0026gt;, which contains a title for that section, and may have an \u0026lt;article\u0026gt; that contains the content of this section, and it also may have a \u0026lt;footer\u0026gt; to conclude this section. And then after that, you can have another \u0026lt;section\u0026gt; or so on.\nBefore every HTML5, these tags were not there, and people were only using the \u0026lt;div\u0026gt; tag. then they either give it an id equal to main or they give it a class named main or something like that to distinguish from others.\nAlright, so now whenever we design our webpage, would like to have these tags. These tags will help the search engines to index our page well. When it finds something in the main it would say that this is the main topic of the page. And when it finds something in a section it\u0026rsquo;s going to say that this section is about this topic.\nSemantic Tags in Action The following video shows the usage of semantic tags in twitter website. Exercises Debug HTML Expand This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called \u0026ldquo;debugging\u0026rdquo; your code.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;This sentence should be on its own So should this one.\u0026lt;/p\u0026gt; \u0026lt;p. Whats wrong with this sentence? \u0026lt;p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Create a webpage Expand Given the following text:\nMy Hobbies Soccer 5 years Soccer is an awesome sport because you get to play on a team with all your friends. I love the challenge of learning new skills like headers and corner kicks. Baking 10 years I love baking because you put together all these things that look simple and boring on their own to make something magical and delicious. I also love how baked things make people happy. Sharing things I bake might be the best part of it! Drawing 2 years On the weekend sometimes I go outside and try to draw what I see. My favorite things to draw are buildings. try to use your HTML skills to create a page that looks like the following HTML 5 Webpage Expand Given the text:\nEasy 5-Minute Banana Smoothie Easy 5-Minute Banana Smoothie PREP 5mins TOTAL 5mins Our banana smoothie is extra creamy and fruity. Depending on how ripe or sweet your banana and orange are, you may need to add a little extra honey, so add based on your taste. There are many additions you can make. For a green smoothie, add 1/2 cup to 1 cup of fresh greens like spinach or kale. You can also add more fruit. Add 1/2 cup of strawberries, mango, frozen berries, pineapple, or other favorite fruit. Makes 2 kid-size smoothies or 1 large You Will Need 1 banana 1/2 orange, peeled and quartered 1/3 cup Greek yogurt 1/4 cup water or milk (dairy or non-dairy) 1 to 2 teaspoons honey, optional Directions Roughly chop the banana and orange quarters, and then add to a blender. Top with yogurt and water (or milk). Turn blender on and blend until creamy and smooth. Taste, and then adjust with honey if needed. Adam and Joanne\u0026#39;s Tips How to Freeze or Make Ahead: This recipe makes one smoothie or two kid-size smoothies. Enjoy now, or save for later. To save the smoothie for later, pour each serving into a food-safe resealable plastic bag or container and freeze. Then, about an hour before needing the smoothie, take it out from the freezer. Non-Dairy alternatives: If you are looking for a banana smoothie without yogurt, then simply leave the yogurt out of the recipe above and replace it with more banana, a tablespoon or so of nut butter, mango, or a tablespoon of hemp seeds (great protein source). You may need to add additional water or non-dairy milk to thin the smoothie out a little. Nutrition facts: The nutrition facts provided below are estimates. We have used the USDA database to calculate approximate values. If you make this recipe, snap a photo and hashtag it #inspiredtaste — We love to see your creations on Instagram and Facebook! Find us: @inspiredtaste NUTRITION PER SERVING: Serving Size 1 kid-size smoothie / Calories 122 / Protein 5 g / Carbohydrate 23 g / Dietary Fiber 3 g / Total Sugars 16 g / Total Fat 2 g / Saturated Fat 1 g / Cholesterol 5 mg AUTHOR: Adam and Joanne Gallagher The full recipe post can be found on Inspired Taste here: https://www.inspiredtaste.net/19907/simple-banana-smoothie-recipe/ and the image at\nhttps://www.inspiredtaste.net/wp-content/uploads/2016/06/Banana-Smoothie-Recipe-3-1200.jpg Use your HTML 5 skills to create a page like the following\nMore Resources Document and website structure Stop using so many divs! An intro to semantic HTML ","date":1641969401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641969401,"objectID":"fade77184d2e8eb8ac218d0a6d62825e","permalink":"http://alasidig.github.io/swe-363.github.io/courses/swe363/html/basics/","publishdate":"2022-01-12T09:36:41+03:00","relpermalink":"/swe-363.github.io/courses/swe363/html/basics/","section":"courses","summary":"The basic tags in HTML.","tags":["html","front-end","semantic-tags"],"title":"HTML Basics","type":"docs"},{"authors":null,"categories":null,"content":"Objectives: How we can write an HTML form and what is the rule of HTML forms\nIntroduction Forms provide the user with a way to interact with a web server. An interactive website allows users to input data using forms. Forms are frontend to backend data transformers.\nFor example, if we are going to design a website for fast food. The front end should show some images of the meals. And also the user should be able to click somewhere on the page to add to the shopping cart. And when checking out, he should be able to set his address to deliver the food in a form. So all that should be done on the front end. But we also need to pass data from the front end to the back end so that the admin of this restaurant to be able to serve this customer. The admin will have another view which talks to the database and tell the admin that some person here is ordering a meal and he would like to get it in that address.\nForms usually include a series of HTML \u0026lt;input\u0026gt; tags. There are many other tags, but input is the most used. Before HTML 5 there was a limited number of data entry controls that are available. In HTML 5 there are controls for entering text, choosing from a list of buttons and checkboxes, radio buttons ..etc. HTML 5 also added more new controls that we can use to customize options for existing controls.\nWorked Example Let\u0026rsquo;s create a simple form that asks the user for a feedback. The required fields includes his name, phone, and a message. The form starts from line 10 where we added the \u0026lt;form\u0026gt; tag. Then followed by an \u0026lt;input\u0026gt; tag for the user name, then another one for the phone, and finally a \u0026lt;textarea\u0026gt; to hold the message. The \u0026lt;ul\u0026gt; and \u0026lt;li\u0026gt; tags are used to format the fields to show in a vertical column because the \u0026lt;input\u0026gt; and \u0026lt;textarea\u0026gt; are inline elements. Click on the green button to see the output.\nThe \u0026lt;input\u0026gt; field \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;user\u0026#34; placeholder=\u0026#34;Enter your name\u0026#34; required\u0026gt; It is a self closing tag The type attribute can have many values like number, email, password, \u0026hellip;etc. It is helpful for simple validation and will render a sutable keyboard on the smartphones. The placeholder attribute is used to display a helping string to the the user what should he input in this field. The required attribute is used to force the user to fill the field before submission. The name attribute is used to communicate the entered values to the server. When submitting this form, a dictionary of keys and values will be created. The keys are what is being assigned to the name attribute. And the values are the user response for each field. Try to change the name attribute for the first \u0026lt;input\u0026gt; to user2 and see the result. Setting the type to submit will create a button to submit the form and enable submitting the form by just pressing the enter key on the keyboard. There are many other attributes not added here such as value, onkeyup, \u0026hellip; The \u0026lt;textarea\u0026gt; field It is used to enable the user to enter more than one line of text. There are some other attributes not added here such as rows, cols,\u0026hellip; The \u0026lt;form\u0026gt; tag \u0026lt;form action=\u0026#34;result.html\u0026#34; method=\u0026#34;get\u0026#34;\u0026gt; It wraps the input fields. The action attribute tels where to submit the form. It accept the URL of the server that will process the form data. Since we are only discussing the frontend now, the server side script will not be discussed. There are many other attributes not added here such as onsubmit, enctype, \u0026hellip; The method attribute determines how to submit the form. It can be set to get or post. There are some differences between the two methods as shown in the following video Exercises Company hiring form Expand Create a web page for a company of your choice it should contain some description, products, images, and a large title: We are hiring join us by filling this application. the title should link to a page that contains the following form: Restaurant Table Reservation Expand create a web page for a restaurant. it should contain an image and a list of meals with some description. it should contain a link to another page that contains a form to reserve a table like the following.\nMore Resources Your first form Basic native form controls The HTML5 input types Creating Accessible Forms ","date":1641969401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641969401,"objectID":"d1ae7f63919738e88b7821bf5bf7530f","permalink":"http://alasidig.github.io/swe-363.github.io/courses/swe363/html/advanced/","publishdate":"2022-01-12T09:36:41+03:00","relpermalink":"/swe-363.github.io/courses/swe363/html/advanced/","section":"courses","summary":"Some advanced tags in HTML like forms and tables.","tags":["html","front-end","form-fields"],"title":"HTML Advanced","type":"docs"},{"authors":null,"categories":null,"content":"Objectives Learn the basics of using CSS for styling websites.\nIntroduction In web development the rule of Cascade Style Sheets is to control how the contents are presented to the user. It is used to decide on the site layout, colors, fonts, animations, \u0026hellip; etc.\nWorked Example: In this handout, we will create an interactive smiley face. The final output looks as follows. It is recommended that you write the code your self before expanding the given solution. Try to avoid coping and pasting.\nHTML code In the HTML body, we would like to start drawing this 😀. We can have a \u0026lt;div\u0026gt; with the class smiley. And inside this div, we would like to have two other divs, one for each eye, and one for the mouth. Still, we can\u0026rsquo;t see anything on the browser because these divs by default don\u0026rsquo;t have any size unless you give them some content inside.\nIndex.html \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style2.css\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Smile Please\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hover Over Me to Smile!!\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;smiley\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;eyes\u0026#34; id=\u0026#34;leftEye\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;eyes\u0026#34; id=\u0026#34;rightEye\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- for entertainment add cheeks --\u0026gt; \u0026lt;div class=\u0026#34;cheeks\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;cheeks\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mouth\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; CSS Styling Now let\u0026rsquo;s start the styling. We would like firstly to style the smiley class. Firstly, to show it on the screen, we need to give it height and width since we don\u0026rsquo;t have any content in this div. By default, it\u0026rsquo;s going to take the full widht of the screen because it is a block element. Then, change the background-color to gold.\nStyling the face smiley class CSS rules .smiley{ height: 200px; width: 200px; /* let us give it some background-color: ; */ background-color: gold; } We would like to give it some space around it and move it away from the edge. To do that, we can use the margin property. The margin is the space around the element outside the border while the padding is space around the content.\nsmiley class CSS rules .smiley{ height: 200px; width: 200px; /* let us give it some background-color: ; */ background-color: gold; /* let us move it away from the edges */ margin: 25%; } We can also, add a border around the face. For the border property, you choose the color, style, and thickness. So let\u0026rsquo;s add a black solid 2px thick border. but we are not limited to these named colors. Hovering over the word ‘black’ in VSCode will popup the color chooser utility to select any color. The color can be represented as a blend of red, green, and blue with different ratios. smiley class CSS rules .smiley{ height: 200px; width: 200px; /* let us give it some background-color: ; */ background-color: gold; /* let us move it away from the edges */ margin: 25%; /* let us add border to the face. now let us use a different way to add colors border*/ border: black solid 5px; } So we gave it now a border, but the face doesn\u0026rsquo;t look square right? So to change that we can use the border-radius. The border-radius specifies how rounded the corner should be. we would like the face to be completely round. This means the border-radius should be at least half of the width 100px. we can use relative units (50%) and let CSS handle the calculation\nsmiley class CSS rules .smiley{ height: 200px; width: 200px; /* let us give it some background-color: ; */ background-color: gold; /* let us move it away from the edges */ margin: 25%; /* let us add border to the face. now let us use a different way to add colors border*/ border: rgb(45, 45, 45) solid 5px; /* but the face shouldn\u0026#39;t be a square */ border-radius: 50%; } Styling the mouth So inside the 😀 we are having eyes and a mouth. The mouth needs size and background color to show up. Let us add height and width and a black 10px thick border. mouth class CSS rules .mouth{ height: 50px; width: 75px; border-bottom: #2d2d2d solid 10px; } Face Layout OK, but this is not where the mouth should be. To move it to the right location, we can think of the face as a 5x5 grid. The mouth should be in the forth row and spanning three columns as in this figure: The line marks the starting of the column or a row. to do that we can change the display property of the .smiley to grid and set the templates for rows and columns. smiley class CSS rules .smiley{ height: 200px; width: 200px; /* let us give it some background-color: ; */ background-color: gold; /* let us move it away from the edges */ margin: 25%; /* let us add border to the face. now let us use a different way to add colors border*/ border: black solid 5px; display: grid; grid-template-columns: repeat(5,1fr); grid-template-rows: repeat(5,40px); place-items: center; } Whit that done, now we can style the mouth and move it to the correct place. mouth class CSS rules .mouth{ height: 50px; width: 75px; border-bottom: #2d2d2d solid 10px; grid-row: 4; grid-column: 2/5; } Styling the eyes Similarly, we can style the eyes. Since the two eyes share common style, we can add the common CSS properties to the eyes class and use the ids for the distinct styles eyes class CSS rules .eyes{ width: 25px; height: 45px; background-color: #2d2d2d; /* make them oval */ border-radius: 50%; } Right and left eye CSS rules #leftEye{ grid-column: 2; grid-row: 2; } #rightEye{ grid-column: 4; grid-row: 2; } Adding the cheeks The cheeks style is similar ot the eyes. The differences are the color and the position. For the color, instead of a single solid color, a fancy gradient color is used. cheeks class CSS rules .cheeks{ width: 35px; height: 45px; background:radial-gradient(circle,red,pink); border-radius: 50%; opacity: 35%; grid-row: 3; } To move the right cheek to the right, we can select it using the pseudo class nth-of-type Right cheek CSS rules div.cheeks:nth-of-type(2n){ grid-column: 5; } Animation Let us now finally smile 😊. For this we use hover pseudo class. For the eyes, we would like to change their width and height.\nSmiling eyes CSS rules .smiley:hover .eyes{ width: 45px; height: 25px; } For the mouth, we would like to change the width, height, and border-radius.\nSmiling mouth CSS rules /* the mouth should expand and become rounded*/ .smiley:hover .mouth{ width: 100px; height: 50px; border-radius: 50%; } The cheeks should be hidden and only be shown on hover. This can be done using the opacity. In the .cheeks class change the css opacity: 35%; to css opacity: 0; to hide the cheeks.\nSmiling cheeks CSS rules .smiley:hover .cheeks{ opacity: 35%; } Finally to have a smooth transition we can set the duration of state-change to 1 second. To do that, use the transition property. This should be added to eyes, cheeks, and mouth. Instead of repeating the same rule in different places, we can use the * selector to select all the children of .smiley div.\nSmooth animation .smiley \u0026gt;*{ transition: 1s ; } Exercises Suggested changes on the example Add different animations like 😂 or 🤣 ro 🤩 Replace the grid-template-columns by grid-template-areas Replace the grid by flex Re-implement using position instead of grid Webpages styling Deserts of the world Expand Fork the repl on the following link https://replit.com/@alasidig/cssimages#index.html then follow the comments on the style.css to make the page looks like the following image\nURL Shortener Expand Fork the following repository https://github.com/alasidig/url-shortener then following the style guide in style-guide.md, start styling the page until it looks like the image in the design/desktop-active-states.jpg. ","date":1644475001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644475001,"objectID":"79c9dd8b3a0503a6aeef79145dc01cb5","permalink":"http://alasidig.github.io/swe-363.github.io/courses/swe363/css/css_basics/","publishdate":"2022-02-10T09:36:41+03:00","relpermalink":"/swe-363.github.io/courses/swe363/css/css_basics/","section":"courses","summary":"The basic CSS.","tags":["css","front-end"],"title":"CSS Basics","type":"docs"},{"authors":null,"categories":null,"content":"Objectives Learn the basics of using JavaScript for listening and responding to different events that may happen in a web page.\nIntroduction In a web page, many events can occur. When the page loads, when clicking on a button, when changing a selection of choices, when pressing a key on the keyboard editing some input, and many others. JavaScript can listen for these events and execute some code to customize the behaviour in response the their occurrence.\nWorked Example In this handout, we will use JavaScript to listen and handle different events. The final behaviour looks as follows. After two seconds from loading the page, the form disappears. Clicking on the button reveals the form and disappears. Capitalize the first name as the user types Validate that the email is filled before submitting the form Validate that the username only contains alphanumeric characters and underscores Remind the user to receive our promotion and respect his decision It is recommended that you write the code your self before expanding the given solution. Try to avoid coping and pasting.\nHTML code In the HTML body, we would like to have a form to demonstrate different events and how to handle them. Index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;JS Demo\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button onclick=\u0026#34;showForm(this)\u0026#34;\u0026gt;click to register\u0026lt;/button\u0026gt; \u0026lt;form onsubmit=\u0026#34;return validate()\u0026#34; action=\u0026#34;\u0026#34; name=\u0026#34;register\u0026#34; method=\u0026#34;GET\u0026#34; class=\u0026#34;form\u0026#34; autocomplete=\u0026#34;off\u0026#34;\u0026gt; \u0026lt;input onkeyup=\u0026#34;capitalize(this)\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;firstname\u0026#34; placeholder=\u0026#34;first name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;email\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; placeholder=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;promo\u0026#34; id=\u0026#34;promo\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;promo\u0026#34;\u0026gt;Send me Promotions\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script src=\u0026#34;index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; As shown in line 8 and 21 we are linking external CSS and JS files.\nSimple Style Simple CSS rules 1 2 3 4 5 6 7 8 9 10 11 12 body{ background-color: antiquewhite; } .form input{ display: block; margin-top: 1rem; padding: .75rem; } button{ padding: 1em; font-size: 1.2rem; } 1. JS Listening and responding to page load Page loading is one of the window related events. It is fired when the browser completes loading the page components (HTML,CSS,JS).\nTo target this event, we provide a handler to be called when the event fires. In this example, we would like to wait for 2 seconds then hide the form. This can be done using setTimeout.\nAs shown in the video, the form slides out of the screen. This can be done by changing its CSS margin-left to a negative value. To get a reference to the form we can use the DOM to find an HTML element named register. To change the CSS style of an element we can set the desired property on element.style. The name of the property (margin-left in our case) will be the same except it is camelCased (ie marginLeft). Hide the form 1 2 3 4 5 document.onload = setTimeout(hideForm, 2000); const form = document.register; function hideForm() { form.style.marginLeft = \u0026#34;-300px\u0026#34;; } 2. Reshowing the form onclick The first element in the HTML body is a button. As on line 12, we added onclick attribute to the button. This is the second way to listen and respond to events. When the user clicks on this button the function named showForm will be called. To show the form we can reverse the way it was hidden by resetting the left-margin to 0. The parameter this is a reference to the clicked button. We can use this reference to hide the button. It will be assigned to the eventSource parameter. Reshow the form 6 7 8 9 function showForm(eventSource) { form.style.marginLeft = \u0026#34;0px\u0026#34;; eventSource.style.display = \u0026#34;none\u0026#34;; } 3. Capitalize the first name as the user types To change the case as the user types, we target the onkeyup keyboard event on the first-name field as in line 14. This event will be fired after each keyboard keypress. When it occurs, the value attribute holds the current entered text. We replace it with the capital version using the toUpperCase string function. Capitalize text 10 11 12 function capitalize(inputField) { inputField.value = inputField.value.toUpperCase(); } 4. Validate that the email is filled before submitting the form So far we targeted individual inputs and handled events on them. But now we are interested in validating the form before we send it to the server. There are different levels of validating the form. The first, using HTML 5 tags: by setting the type to email, the browsers will validate that it at least contains @ symbol. The second level, using client-side javascript: by handling the onsubmit form event and check the inputs before submitting. The third level using server-side scripting when receiving the form data.\nIn this step, we do the second level of validation. As shown in line 13 of the HTML, the \u0026lt;form\u0026gt; tag sets the onsubmit handler to the return of validate(). This means if this function returns true, the form is valid and can be sent to the server. Otherwise, it is not valid and we should not send it. For the email field w\u0026rsquo;d like to make sure it is filled before submitting the form. We need a reference to the email field to check the length of its value. If it is zero, this means the user didn\u0026rsquo;t provide the email and shouldn\u0026rsquo;t submit this form. Form Validation: Required Email 13 14 15 16 17 18 19 20 21 22 23 24 25 26 function validate() { // validate the email let email = document.register.email.value; // find the value of the email if (email.length == 0) { alert(\u0026#34;invalid email\u0026#34;); return false; } // validate the user name // validate the promotion return true; // all validations passed successfully } 5. Validate that the username only contains alphanumeric characters and underscores Following the same steps of validating the email, we can check the validity of the username. The problem here is to make sure that only alphanumeric and underscores are used. Since the username can be in any form of combination of these characters, this means using regural expression is one of the best ways to validate it. The following regular expression can be used to check for that ^[a-zA-Z0-9_]+$. Following is the explanation of this regex:\n^ asserts position at start of a line Match a single character present in the list below [a-zA-Z0-9_] + matches the previous token between one and unlimited times, as many times as possible, a-z matches a single character in the range between a (index 97) and z (index 122) (case sensitive) A-Z matches a single character in the range between A (index 65) and Z (index 90) (case sensitive) 0-9 matches a single character in the range between 0 (index 48) and 9 (index 57) (case sensitive) _ matches the character _ with index 95 literally (case sensitive) $ asserts position at the end of a line. The test function checks if the string (username.value ) satisfies all of above conditions function validate() continuation: username 21 22 23 24 25 26 27 28 //validate the user name let username = document.register.username; let regex = /^[a-zA-Z0-9_]+$/; if (!regex.test(username.value)) { alert(\u0026#34;invalid username\u0026#34;); username.focus(); return false; } 6. Remind the user to receive our promotion and respect his decision This is a soft validation, if the user choose not receive promotions, we remind him before submitting. If he accepts after the reminder we submit the form showing that he accepted. And if he declines after the reminder we submit the form respecting his choice. The confirm function presents the user the prompt. It returns true if the user clicks on Ok and false when he clicks on Cancel\nfunction validate() continuation: promotion 30 31 32 33 34 // validate the promotion let promoCheck = document.querySelector(\u0026#34;#promo\u0026#34;); if (!promoCheck.checked) { promoCheck.checked = confirm(\u0026#34;If you don\u0026#39;t want miss our promotion click ok\u0026#34;); } Exercises Suggested changes on the example Add regex validation for the email. Replace the alert calls by placing the error message beside the input field. Add a reset button and clear all the input fields when clicked. Validate the company hiring form Expand Validate the form give in This Exercise.\nAll fields labeled with red star are required. The date for When can you start? must be after the date of filling the form. A maximum 200 characters comment. ","date":1645337589,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1645337589,"objectID":"30c4c61b48729eee6e303d1fe6d42a5d","permalink":"http://alasidig.github.io/swe-363.github.io/courses/swe363/js/events/","publishdate":"2022-02-20T09:13:09+03:00","relpermalink":"/swe-363.github.io/courses/swe363/js/events/","section":"courses","summary":"Listening and responding to events in JavaScript.","tags":["JS","JS Events","front-end"],"title":"JS Events","type":"docs"},{"authors":null,"categories":null,"content":"Objectives Learn the basics of using JavaScript for modifying the HTML and CSS and responding to different events that may happen on a web page.\nIntroduction JavaScript describes the HTML structure in a tree-like object called the Document Object Model. It provides many functions to: select element\\s on the HTML, create new element\\s, style elements, \u0026hellip; etc.\nWorked Example In this handout, we will use JavaScript to create a quiz-taking webapp. The final behavior looks as follows. The user clicks on the Start button to see the questions Show a random question. Change the background to reflect the correctness then disable the choices buttons. Show the Next button if there are more questions else show the score. HTML Code Quiz App HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Exploring Dom\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 name=\u0026#34;scoreMessage\u0026#34;\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;question-card hide\u0026#34;\u0026gt; \u0026lt;h1 id=\u0026#34;question\u0026#34;\u0026gt;What is 5+2\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;answers\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button class=\u0026#34;btn \u0026#34;\u0026gt;10\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;btn\u0026#34;\u0026gt;12\u0026lt;/button\u0026gt; \u0026lt;button data-correct=\u0026#34;true\u0026#34; class=\u0026#34;btn\u0026#34;\u0026gt;7\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;btn\u0026#34;\u0026gt;6\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button id=\u0026#34;start\u0026#34; onclick=\u0026#34;start()\u0026#34; class=\u0026#34;btn\u0026#34;\u0026gt;Start\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;next\u0026#34; class=\u0026#34;btn hide\u0026#34; onclick=\u0026#34;goNext()\u0026#34;\u0026gt;Next\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;app.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; In line 15 the \u0026lt;h1\u0026gt; is used to display the question text. And the answers are wrapped in a div inside the one with id=answers. The data-correct attribute is added to the button that holds the correct answer.\nCSS Style Quiz App CSS rules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 body{ margin: 0; padding: 0%; height: 100vh; background:rgb(17, 17, 53) linear-gradient(to bottom right,rgb(17, 17, 53),rgb(67, 189, 67)); display: flex; justify-content: center; align-items: center; font-size: 62.5%; box-sizing: border-box; } .container{ display: flex; background-color: white; padding: 2rem; border-radius: 1rem; flex-direction: column; align-items: center; justify-content: center; justify-items: center; } .question-card{ display: flex; flex-direction: column; box-shadow: 0 0 1rem .5rem ; padding: 2rem; border-radius: 1rem; margin-bottom: 1rem; } .hide{ display: none; } .btn{ font-size: 2rem; border-radius: 1rem; color: white; border: transparent; background-color: rgb(197, 168, 1); padding: .5rem; margin: .2rem; cursor: pointer; } .btn:hover{ transform: scaleX(1.2); box-shadow: 0 0 .5rem .25rem; } h1{ font-size: 2.5rem; } #answers div{ display: flex; flex-direction: column; justify-content: space-between; } .correct{ background-color: rgb(27, 133, 141); } .incorrect{ background-color: rgb(197, 74, 74); } The class .hide is used to hide the elements. It will be added and removed using Javascript to hide the next button until the user chooses an answer. The classes .correct and .incorrect are used to reflect the correctness of the chosen answer.\nJavaScript Skeleton The JavaScript Skeletonfind the elements */ /* start button*/ // const startBtn = /* the element that has the question-card class*/ // const cardEle = /* the question title*/ // const qTitleEle = /* the element with the id of answers*/ // const choicesEle = /* the next button*/ // const nextBtn = let currentQuestion, qIndex, score = 0, points = 10, maxPoints; /* function called when clicking on the start button*/ function start() { /* show the questions card cardEle*/ /* hide the start button*/ /* set the maximum points a user can get for solving all the questions*/ // maxPoints = console.log(\u0026#39;start function called\u0026#39;); createQuestion(); } function createQuestion() { console.log(\u0026#39;Creating question\u0026#39;); /* randomly select a question from the questions array*/ /* qIndex is the index of the question in the array*/ // qIndex = // currentQuestion = questions[qIndex] // qTitleEle /* fill the question title */ /* remove the div that wraps all the answer buttons*/ // choicesEle /* create a new div to wrap the choices*/ // let wrapper = /* add all the choices to this wrapper*/ // currentQuestion.choices.forEach(choice =\u0026gt; { // wrapper.appendChild(createChoice(choice)) // }); /* add the wrapper to the choicesEle*/ // choicesEle /* remove the selected question from the questions array so that it will not be shown again*/ // questions } /* function to create a button for each choice*/ function createChoice(choice) { console.log(\u0026#39;creating choice\u0026#39;, choice); /* create a button element*/ // let element = // element.classList.add(\u0026#34;btn\u0026#34;) // element.innerText = choice.choice; /* create a data-correct attribute for the correct answer button*/ // if (choice.correct) { // element.dataset[\u0026#34;correct\u0026#34;] = true // } /* add click event handler.*/ // element.addEventListener(\u0026#39;click\u0026#39;, answer) // return element; } /* function to handle the click on an answer button*/ function answer(event) { const src = event.srcElement console.log(\u0026#39;user choose \u0026#39;, src); if (src.dataset[\u0026#34;correct\u0026#34;]) { /* add the \u0026#39;correct\u0026#39; CSS class to both the button and the cardEle*/ // src // cardEle /* update the user score*/ // score } else { /* add the \u0026#39;incorrect\u0026#39; CSS class to both the button and the cardEle*/ // src // cardEle } proceed(); } /* function called after the click of an answer button*/ function proceed() { /* disable the buttons so the user can\u0026#39;t change his answer*/ disableChoices(); /* then show the next button to move to next question*/ setTimeout(showNext, 1000); } /* function to disable the choices buttons*/ function disableChoices() { console.log(\u0026#39;disabling the choices\u0026#39;); /* find all choices buttons*/ const choicesBtns = document.querySelectorAll(\u0026#34;button:not(.hide)\u0026#34;); choicesBtns.forEach(btn =\u0026gt; { /* remove the click event handler so the button does nothing when clicked*/ // btn }); } /* function to show the next button*/ function showNext() { console.log(\u0026#39;Show next button\u0026#39;); /* remove the \u0026#39;correct\u0026#39; and the \u0026#39;incorrect\u0026#39; classes from the cardEle*/ // cardEle // cardEle if (questions.length \u0026gt; 0) { /* remove the hide class from the nextBtn*/ // nextBtn } else { /* show the score*/ // = `Done! your score is ${score} / ${maxPoints}` } } /* function called when clicking on next button*/ function goNext() { /* hide the next button*/ nextBtn.classList.add(\u0026#34;hide\u0026#34;) /* create a new question*/ createQuestion(); } const questions = [ { text: \u0026#34;What is 2 + 2\u0026#34;, choices: [ { choice: 4, correct: true }, { choice: 3 }, { choice: 0 }, ] }, { text: \u0026#34;What is 2 x 2\u0026#34;, choices: [ { choice: 4, correct: true }, { choice: 6 }, { choice: 3 }, { choice: 0 }, ] }, { text: \u0026#34;What is 2 - 2\u0026#34;, choices: [ { choice: 0, correct: true }, { choice: 6 }, { choice: 3 }, { choice: 4 }, ] }, ] The file contains two types of comments: the /* */ comment for the step to be done, and the // for partially complete code for us to complete. For example, in line 3 /* start button*/ asking us to find a reference to the start button, while on line 4 // const startBtn = we should uncomment it to complete the task.\nFinding the HTML elements in JS To find the different required elements, we can use any of the DOM query methods. The query is based on the attributes of those HTML elements like id, class. For demonstration, we will use different DOM query methods. Querying the DOM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* find the elements */ /* start button*/ const startBtn = document.getElementById(\u0026#34;start\u0026#34;); /* the element that has the question-card class*/ const cardEle = document.getElementsByClassName(\u0026#34;question-card\u0026#34;)[0] /* the question title*/ const qTitleEle = document.getElementById(\u0026#34;question\u0026#34;) /* the element with the id of answers*/ const choicesEle = document.querySelector(\u0026#34;#answers\u0026#34;) /* the next button*/ const nextBtn = document.querySelector(\u0026#34;#next\u0026#34;) let currentQuestion, qIndex, score = 0, points = 10, maxPoints; Implementing the start function When the user clicks on the start button, The question\u0026rsquo;s card should be shown and the start button should be hidden. start() function 17 18 19 20 21 22 23 24 25 26 27 /* function called when clicking on the start button*/ function start() { /* show the questions card cardEle*/ cardEle.classList.remove(\u0026#39;hide\u0026#39;) /* hide the start button*/ startBtn.classList.add(\u0026#34;hide\u0026#34;) /* set the maximum points a user can get for solving all the questions*/ maxPoints = points * questions.length console.log(\u0026#39;start function called\u0026#39;); createQuestion(); } To hide an element we just add the hide class to that element. This is done by calling the add method on the classList property of the element.\nImplementing createQuestion function createQuestion function 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 function createQuestion() { console.log(\u0026#39;Creating question\u0026#39;); /* randomly select a question from the questions array*/ /* qIndex is the index of the question in the array*/ qIndex = Math.floor(Math.random() * questions.length) currentQuestion = questions[qIndex] qTitleEle.innerText = currentQuestion.text /* fill the question title*/ /* remove the div that wraps all the answer buttons*/ // choicesEle choicesEle.removeChild(choicesEle.firstElementChild); /* create a new div to wrap the choices*/ let wrapper = document.createElement(\u0026#34;div\u0026#34;) /* add all the choices to this wrapper*/ currentQuestion.choices.forEach(choice =\u0026gt; { wrapper.appendChild(createChoice(choice)) }); /* add the wrapper to the choicesEle*/ choicesEle.appendChild(wrapper); /* remove the selected question from the questions array so that it will not be shown again*/ questions.splice(qIndex, 1) } The function starts by finding a random index of a question from the questions array. Math.random generates a random number in the range [0-1). To convert this number to the range [0~length-1], multiply it by the length of the array. Then set the question title element (h1) content to the text of the random question. Then it removes the old questions choices by deleting the div that wraps them. And recreate a wrapper div to hold the new question choices. Then it iterates over the new question choices to create a button for each choice and add it to the wrapper. The code now is broken because we didn\u0026rsquo;t implement the createChoce function. Then add the wrapper to the DOM to replace the old one. Finally, to remove the randomly chosen question from the array, it uses splice(startIndex, count) array function. This means each time this function is called, the array length is decremented. When it becomes empty the application should stop. Implementing createChoice function createChoice function 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 /* function to create a button for each choice*/ function createChoice(choice) { console.log(\u0026#39;creating choice\u0026#39;, choice); /* create a button element*/ let element = document.createElement(\u0026#34;button\u0026#34;); element.classList.add(\u0026#34;btn\u0026#34;) element.innerText = choice.choice; /* create a data-correct attribute for the correct answer button*/ if (choice.correct) { element.dataset[\u0026#34;correct\u0026#34;] = true } /* add click event handler.*/ element.addEventListener(\u0026#39;click\u0026#39;, answer) return element; } The function creates a button and sets its content to the choice text value. Then conditionally add the data-correct attribute to the button if it is the correct answer. Then it sets the click event handler to be the answer function. And returns the button to createQuestion Implementing the answer function answer function 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 /* function to handle the click on an answer button*/ function answer(event) { const src = event.target console.log(\u0026#39;user choose \u0026#39;, src); if (src.dataset[\u0026#34;correct\u0026#34;]) { /* add the \u0026#39;correct\u0026#39; CSS class to both the button and the cardEle*/ src.classList.add(\u0026#34;correct\u0026#34;) cardEle.classList.add(\u0026#34;correct\u0026#34;) /* update the user score*/ score += points; } else { /* add the \u0026#39;incorrect\u0026#39; css class to both the button and the cardEle*/ src.classList.add(\u0026#34;incorrect\u0026#34;) cardEle.classList.add(\u0026#34;incorrect\u0026#34;) } proceed(); } The function finds which button did the user choose by finding the target property of the event. Then it either adds correct or incorrect class to both the button and the question card. If the event source contains data-correct attribute, it means the user chooses the correct answer. It also updates the user score by adding the points for a correct answer. Then it calls proceed function which calls disableChoices to prevent the user from changing his answer and showNex function to show the Next button. Implementing disableChoces function disableChoices 94 95 96 97 98 99 100 101 102 103 /* function to disable the choices buttons*/ function disableChoices() { console.log(\u0026#39;disabling the choices\u0026#39;); /* find all choices buttons*/ const choicesBtns = document.querySelectorAll(\u0026#34;button:not(.hide)\u0026#34;); choicesBtns.forEach(btn =\u0026gt; { /* remove the click event handler so the button does nothing when clicked*/ btn.removeEventListener(\u0026#39;click\u0026#39;, answer); }); } The function finds all the buttons except the hidden ones (Start and Next) Then it loops over these buttons to remove the click event handler. When the user clicks on any of the choices the answer function is not called Implementing showNext function showNext Function 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 /* function to show the next button*/ function showNext() { console.log(\u0026#39;Show next button\u0026#39;); /* remove the \u0026#39;correct\u0026#39; and the \u0026#39;incorrect\u0026#39; classes from the cardEle*/ cardEle.classList.remove(\u0026#34;incorrect\u0026#34;) cardEle.classList.remove(\u0026#34;correct\u0026#34;) if (questions.length \u0026gt; 0) { /* remove the hide class from the nextBtn*/ nextBtn.classList.remove(\u0026#34;hide\u0026#34;); } else { /* show the score*/ document.getElementsByName(\u0026#34;scoreMessage\u0026#34;)[0].innerText = `Done! your score is ${score} / ${maxPoints}` } } The function removes the animation of correct or incorrect answers Then it checks if there are some questions left in the array. As we show in createQuestion the function removes the randomly chosen question. If there are some questions left, it shows the Next button to enable the user to move to the next question. If there are no questions left, it shows the score message. Exercises Suggested changes on the example Randomize the answers Add a timer for each question. Create different types of questions: multiple answer, fill in the blank use regular expressions to check the user answer. ","date":1645364153,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1645364153,"objectID":"4c9394e5a9e9f22f79dca8b9855569c8","permalink":"http://alasidig.github.io/swe-363.github.io/courses/swe363/js/dom/","publishdate":"2022-02-20T16:35:53+03:00","relpermalink":"/swe-363.github.io/courses/swe363/js/dom/","section":"courses","summary":"Manipulating the Document Object Model in JavaScript.","tags":["JS","JS DOM","JS Events","front-end"],"title":"DOM Manipulation","type":"docs"},{"authors":[],"categories":null,"content":" Slides can be added in a few ways:\nCreate slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"8ebbbdeba622fbc24dab29b4efa6b173","permalink":"http://alasidig.github.io/swe-363.github.io/talk/coding/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/swe-363.github.io/talk/coding/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Coding and Analyzing Qualitative Data","type":"talk"},{"authors":[],"categories":null,"content":" Slides can be added in a few ways:\nCreate slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a3975af5f5dadc9b2c7bbc4e48bb0e6e","permalink":"http://alasidig.github.io/swe-363.github.io/talk/qualitative/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/swe-363.github.io/talk/qualitative/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Qualitative Research Summer Intensive","type":"talk"},{"authors":[],"categories":null,"content":" Slides can be added in a few ways:\nCreate slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"f917008f74aa8012979052dcf8dbf864","permalink":"http://alasidig.github.io/swe-363.github.io/talk/synthesizing/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/swe-363.github.io/talk/synthesizing/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Synthesizing Qualitative Data","type":"talk"},{"authors":[],"categories":[],"content":"Welcome to Slides academia\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nA fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/img/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"http://alasidig.github.io/swe-363.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/swe-363.github.io/slides/example/","section":"slides","summary":"An introduction to using academia's Slides feature.","tags":[],"title":"Slides","type":"slides"}]